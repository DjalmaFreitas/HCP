Intro
 

In this tutorial, we’ll learn how create a simple Web application on the Hana Cloud Platform that presents an email form for a user and then transmits the mail using a java email provider. This will be done with a basic servlet that handles both the form and the mail transmission.
We’ll also look at creating a logger and reading its output from the Hana Cloud Server.
The prerequisites for this tutorial are that you have the Eclipse IDE the SAP HANA Cloud Platform Tools installed. If this has not yet been done, please see the earlier tutorials that address these points.


Eclipse
 

Now, let’s open Eclipse. We are going to create the email enabled web  application that creates and sends mails.
1.	From the file menu, choose   New   Dynamic Web Project 
2.	In the Project name field, enter mail.
3.	In the Target Runtime pane, select the runtime you want to use to deploy the application. In this tutorial, we choose Java Web.
4.	In the Configuration pane, leave the default configuration.
5.	Choose Finish to finalize the creation of your project.

Create Servlet
 


Now let’s add the servlet that will be used to generate the mails.
1.	To add a servlet to the project you have just created, select the Email node in the Project Explorer view.
2.	From the Eclipse main menu, choose   File   New   Servlet 
3.	Enter the Java package com.sap.cloud.sample.mail and the class name MailServlet.
4.	Choose Finish to generate the servlet.
You can see a servlet with doGet and doPost method stubs has been created.


WEB.XML
If we open up the email project to find the web.xml file (it is in the WebContent/Web-inf folder), we can see that the servlet and servlet mappings have already been generated automatically.
Servlet Code
Returning to the servlet, I’m going to replace the generated code with code that will make use of the java mail.
Let’s take a look at what this code is doing.

 

Firstly, we inject java mail using the @resource annotation.
Then we setup a static final logger for this class i.e. MailServlet that we can use later to output logging details

 

This code listens for an HTTP Get with the doGet method to send an email form to the user and the HTTP POST doPost method to transmit the mail that the user has input.
The doGet method basically sends a string of HTML text which will be presented as a form containing details like the email from and to addresses, the subject and method body.
In a real live system, using a JSP to create the user email form would probably be an easier option.

 


The email form will post the values in the form to the same servlet and will, of course, be picked up by the doPost method.

The method initially picks up the parameters that have been sent from the email form and then tests that both the from and to addresses have values. If not an exception is generated and the process will be aborted.

Then we create a new MimeMessage using the resource injected mailSession and parse the user entered to and from addresses.

To send text or html in the email, you need to define MimeMultipart as “alternative", the email client will recognize this and display the text.

To send the mail, we get the transport object from the session, connect and forward the mail to all recipients.
Finally, we inform the user that the message was sent by printing a string on the writer stream.

Errors generated by the process will be caught by the catch statement and the error message sent to the logger that we created earlier.
The Finally statement will ensure that system resources are restored by releasing the transport layer.


Test Deployment
 

We can test the email web application locally on the Java Web Server which we will now create.
1.	Right click on the servlet source code and select Run as -> Run on Server.
2.	In the popup, select Java Web Server and choose Finish.
3.	A new server Java Web Server [Stopped, Synchronized] appears on the Servers tab page and the servlet will automatically run on that server.
Because we are running locally and have not setup any mail parameters, no mails will be sent – we will just receive the standard mail output text.



Cloud Deployment

 

Next, we will deploy the app on the Hana Cloud Platform
1.	In the Eclipse main menu, choose   File   New   Other   Server   Server 
2.	Select the server type SAP HANA Cloud Platform and choose Next.
3.	In the SAP HANA Cloud Platform Application dialog box, enter the name of your application, account, user, and password and choose Finish. The new server is listed in the Servers view.
 If you want to avoid re-entering the password, select the ‘Save Password’ checkbox.
This will create the Hana Cloud Server and you can see the current status is stopped.


 

Now we create a Hana Cloud mail destination that contains the SMTP settings of your e-mail provider. The name of the mail destination must match the name used in the resource reference in the web.xml descriptor, in this case ‘Session.
1.	Double-click the server to open the server options form and switch to the Connectivity tab.
2.	In the All Destinations section, choose the   New Destination button.
3.	In the New Destination dialog box, enter the name Session and type Mail and choose OK.
Configure the destination by adding the properties for port 587 (SMTP+STARTTLS) or 465 (SMTPS). To do this, choose the Add Property button in the Properties section:
o	To use port 587 (SMTP+STARTTLS), add the following properties:
Property	Value
mail.transport.protocol	smtp
mail.smtp.host	smtp.gmail.com
mail.smtp.auth	true
mail.smtp.starttls.enable	true
mail.smtp.port	587
mail.user	<gmail account name>
mail.password	<gmail account password>

To try the app on the Hana Cloud, go back to the MailServlet tab, right click and select Run As -> Run on Server.
On the popup, select the ‘Choose an Existing Server’ radio button, select the email app server and click on Finish.
Logging
 

IF you recall, we created a logger object that will output the error messages. To test and view the output logs, we can return to the Cloud Server connectivity tab and edit the password so that it is incorrect. This will then generate an exception and hopefully send the details to the log files.

Remember, of course, that we can set different levels of logging, for example; debug, info, warn, error and trace. In our mail servlet, we are only using error level.

To view the logs, log onto the Hana Cloud Platform Cockpit, then select the ‘Java Applications’ option under content on the left hand side of the page. Then select emailapp.

Scroll down to Most Recent Logging and select the default trace option. 

In the web page that is presented, we have the option of selecting a time range and also an option for the logging level. The default is ‘All’.
To view the details of a specific message, click the search type icon at the end of the row. Here we can see our authentication error message.



Summary
 

In this tutorial, we have created a Email Servlet with a mail destination which when run on the Hana Cloud Platform successfully sends an email based on user entered values in an HTML form.
To see other videos, please check out the Hana Academy Page on Youtube.
Thank you for your attention.









