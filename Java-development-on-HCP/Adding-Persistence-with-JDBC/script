Using the sap hana cloud platform: Adding Persistence with JDBC
Introduction
 

In this tutorial, we’ll learn how you can use JDBC to persist data in a simple Java EE Web application that manages a list of persons.

The prerequisites for this tutorial are that you have the Eclipse IDE and the SAP HANA Cloud Platform Tools already installed. If this has not yet been done, please see the earlier tutorials that address these points.




New Project in Eclipse
 

Now, let’s open Eclipse and create a dynamic web project for the JDBC persistence app.
From the Eclipse main menu, choose   File   New   Dynamic Web Project  .
1.	In the Project name field, enter persistence-with-jdbc.

Create Servlet
 

Now let’s add the servlet that will be used to drive the process.
1.	From the persistence-with-jdbc context menu, choose   New   Servlet 
2.	Enter com.sap.cloud.sample.persistence as the Java package and PersistenceWithJDBCServlet as the Class name and choose Next.
3.	In the URL mappings field, select / PersistenceWithJDBCServlet and choose Edit.
4.	In the Pattern field, replace the current value with just "/". In this way, the servlet will be mapped as a welcome page for the application.

Note: An application's URL path contains the context root followed by the optional URL pattern ("/<URL pattern>"). The servlet URL pattern that is automatically generated by Eclipse uses the servlet’s class name as part of the pattern. Since the cockpit only displays the context root, this means that you cannot directly open the application in the cockpit without adding the servlet name. To call the application by only the context root, use "/" as the URL mapping, then you will no longer have to correct the URL in the browser.


Person Entity Class
 
We will need a Person entity class as a data store.
In the project explorer, locate the com.sap.cloud.sample.persistence package node under Java Resources and src.
Right click and select new->Class – enter the class name as Person then click Finish.
You can see the methods are basic setter and getter access methods.

PersonDAO Class
 

Now we’ll repeat those actions to create a data access object called PersonDAO.
Let’s paste in the new code that will be used to encapsulate the persistence layer.
We can see the constructor takes a JNDI data source as a parameter and the there are access setters and getters a data source.
There is a public addPerson method that takes the Person entity class we have just created as a parameter.
The method gets a database connection from the datasource and then prepares a SQL insert  statement. The values to be added are a random UDID, and the first and last names from the Person object.

The public selectAllPersons methods will retrieve the id, first and last names of all records in the database.
Again, a database connection is accessed and a prepared statement created. The sql here, selects the required information.
We then create an ArrayList of Person entity objects and loop through the result set once the statement has run. For each row of data returned, we create a person entity and populate it with the values from the database. Once populated, the list is returned.
The Check table method tests if the persons table exists in the database, if not it creates it.
It does this by first calling the existsTable method, which runs a metadata query for a full list of all current tables and testing if the Persons table is in that list.
If the table does not exist, the createTable method is called and a connection object passed to it. It then runs a DDL prepared statement to actually create the table.

Prepare the Web Application Project for JDBC
 

To prepare the web app for JDBC, we have to add the XSS Protection Library into the project class path. We also need to edit the web.xml file.
1.	Add the XSS Protection Library to the Web application project:
a.	In the Project Explorer view, select the persistence-with-jbc/WebContent/WEB-INF/lib node.
b.	From the context menu, choose   Import   General    File System   and then choose Next.
c.	Browse to the local directory where you downloaded and unpacked the SAP HANA Cloud Platform SDK, select the repository/plugins directory, and choose OK .
d.	Select the checkbox com.sap.security.core.server.csi_1.x.y.jar and choose Finish.
2.	Adapt the Java build path order:
a.	In the Project Explorer view, select the persistence-with-jpa node, and from the context menu choose Properties.
b.	Select Java Build Path and switch to the Order and Export tab.
c.	Select Web App Libraries and move it up so that it is positioned above SAP HANA Cloud.
d.	Choose OK to finish this step.
3.	Add the resource reference description to web.xml:
a.	In the Project Explorer view, expand the persistence-with-jpa/WebContent/WEB-INF node.
b.	Select web.xml, and from the context menu choose   Open With   Text Editor   .
c.	Insert the following content after the <servlet-mapping> elements:
d.	<resource-ref>
e.	    <res-ref-name>jdbc/DefaultDB</res-ref-name>
f.	    <res-type>javax.sql.DataSource</res-type>
g.	</resource-ref>
h.	Save the file.




 
Next, we’ll edit the Persistence Servlet so that it makes use of the Person entity.
First, I paste this servlet code over the generated servlet.
Let’s look at some of the features of the code in this servlet.

The init method is called at startup and firstly looks for the DefaultDB JNDI resource we set up.
Once located, it creates a HashMap and places the datasource into the map against a non JTA key.
The Persistence class then uses the map to create an Enitity Manager Factory class variable called emf.

The doGet method will be automatically called with an HTTP get that occurs when we call the servlet with a URL. In this servlet, the method is used to generate an HTML list of existing people and setup an HTML form that will allow a user to add new people.

The list of existing people is generated by the ‘appendPersonTable’ method.
We can see that the emf factory is used the run the ‘AllPersons’ query we created earlier on and place the results into a list containing Person entity class types.
A 2 column HTML Table is setup and sent to the output writer stream and an XSSEncode object is obtained. This is a SAP class which will be used here to set HTTP encoding for the persisted values.
Then each existing person’s first and last name is retrieved by looping through the list obtained by the query and placed into a table cell.
The Entity Manager is then closed to conserve system resources.

The appendAddForm method simply outputs the HTML form with the name values and a submit button. There is no variable data in this string and as such it will never change.




The doPost method will respond to a call from this add record form when the ‘Add Person’ button is clicked. The method will then attempt to persist the person values with the doAdd method and then  re-create the person list and add form by calling doGet.

DoAdd attempts to retrieve the first and last name parameters from the HTTP stream and creates another instance of the Entity Manager.
If either of the names have no value, the process is aborted. Otherwise, a new person entity class is created and then populated with the name values. The entity manager will then persist those values in a transaction.
Test Deployment
 

We can test the JPA web application locally on the Java Web Server which we will now create.
1.	Right click on the persistence-with-jpa node and select Run As -> Run On Server 
2.	Select the ‘Manually Define a Server’ Radio and select Java Web Server.
3.	Ensure the app has been configured and select Finish.
4.	The app will now be launched.
Once the servlet has loaded it will be presented an Eclipse tab browser window.
We can try adding a first and last name and saving to see if the values are returned.
If we repeat the process but create a new Hana Cloud server, we can test the app on the Hana Cloud.
This may take some time to initialize but we can see that it works in exactly the same way as the local deployment

 

In this tutorial, we have created a JPA Servlet which allows a user to enter data values, a person’s first and last name and have those values persist.
To see other videos, please check out the Hana Academy Page on You Tube.
Thank you for your attention.


