Using the sap hana cloud platform: Adding Application-Managed Persistence with JPA
Introduction
 

In this tutorial, we’ll learn how you can use JPA (the Java Persistence API) to apply application-managed persistence in a simple Java EE Web application that manages a list of persons. The app is based on the SDK for Java Web.

The prerequisites for this tutorial are that you have the Eclipse IDE and the SAP HANA Cloud Platform Tools already installed. If this has not yet been done, please see the earlier tutorials that address these points.


EclipseLink
 

You will also need to download the JPA Provider, Eclipse Link.
1.	Download the latest 2.5.x version of EclipseLink from: http://www.eclipse.org/eclipselink/downloads
Select the EclipseLink 2.5.x Installer Zip (intended for use in Java EE environments).
2.	Extract the archive.
3.	Copy the following two files to a separate directory in your local file system:
o	eclipselink.jar from the directory eclipselink/jlib
o	javax.persistence_2.*.jar from the directory eclipselink/jlib/jpa
You will need to add these files to your Web application in a later step.



New Project in Eclipse
 

Now, let’s open Eclipse and create a dynamic Web project with the JPA project facet. This enables the relevant JPA tooling and adds the required libraries and artifacts, such as thepersistence.xml file. Then add a servlet (you will extend it in step 5 to use the JPA persistence entity).
1.	From the Eclipse main menu, choose   File   New   Dynamic Web Project  .
2.	In the Project name field, enter persistence-with-jpa.
3.	Make sure that SAP HANA Cloud is selected as the target runtime.
4.	In the Configuration section, choose Modify and in the Project Facets dialog box select the JPA checkbox 
5.	Choose OK to confirm and return to the Dynamic Web Project page
6.	Choose Next, and on the Java page leave the default settings and choose Next again.
7.	On the JPA Facet page in the Platform section, select EclipseLink 2.4.x/2.5.x from the dropdown list.
8.	In the JPA implementation section, select Disable Library Configuration from the dropdown list.
9.	In the Persistent class management section, select the radio button Annotated classes must be listed in persistence.xml and choose Finish to complete this step:
10.	

Create Servlet
 

Now let’s add the servlet that will be used to drive the process.
1.	From the persistence-with-jpa context menu, choose   New   Servlet 
2.	Enter com.sap.cloud.sample.persistence as the Java package and PersistenceWithJPAServlet as the Class name and choose Next.
3.	In the URL mappings field, select /ConnectivityServlet and choose Edit.
4.	In the Pattern field, replace the current value with just "/". In this way, the servlet will be mapped as a welcome page for the application.

Note: An application's URL path contains the context root followed by the optional URL pattern ("/<URL pattern>"). The servlet URL pattern that is automatically generated by Eclipse uses the servlet’s class name as part of the pattern. Since the cockpit only displays the context root, this means that you cannot directly open the application in the cockpit without adding the servlet name. To call the application by only the context root, use "/" as the URL mapping, then you will no longer have to correct the URL in the browser.



The JPA Persistence Entity
 
Next we will create a JPA persistence entity class named Person using the graphical JPA editor. Add an auto-incremented ID to the database table as the primary key and two further attributes, and define a query method that retrieves a Person object from the database table. Each person stored in the database will be represented by a Person entity object.
1.	To create all persistence-related classes in one package, change the default Java package used for new entities as follows:
a.	Select the persistence-with-jpa project, and from the context menu choose   Properties    JPA   JPA Diagram Editor 
b.	In the Default Java package for new entities field, change org.persistence to com.sap.cloud.sample.persistence and choose OK to confirm.
2.	Create the Person entity using the JPA editor:
a.	In the Project Explorer view, select the persistence-with-jpa/JPA Content node, and from the context menu choose Open Diagram.
The graphical JPA editor opens.
b.	Confirm the JPA Support dialog with OK and select Do not show this message again.
c.	From the palette, drag and drop a Java Entity onto the editor grid.
d.	A class called Entity1 is created automatically.
e.	Select the Java entity Entity1, and from the context menu choose   Refactor Persistent Type Class   Rename.
f.	Enter Person as the new name and choose Finish.
g.	Save the file.
3.	Create a named query for the Person entity:
a.	Select the Person entity, and from the context menu choose Open JPA Details View.
b.	In the Queries section in the JPA Details view, choose Add. The Add Query dialog box opens.
c.	Enter the name AllPersons and the type Named Query, and choose OK.
d.	In the Query field, enter the text select p from Person p.

4.	Create and modify the attributes of the Person entity:
a.	In the graphical editor, select the ID attribute of the Person entity.
b.	In the Primary Key Generation section in the JPA Details view, select the Primary key generation checkbox and leave Default (Auto) in theStrategy field.
c.	Add new attributes by hovering over the Person entity and choosing the Create Attribute button. Define two attributes with the names FirstName andLastName.
d.	Save the file.

Person Entity Class
 
If we open the src folder, we can see the Person class has been generated. This class is basically a container with the named query and setter and getter methods for each of the class data items.


Person Entity Metadata
 

We need to define additional settings in the persistence.xml file to set the person entity metadata. This file is in the persistence-with-jpa/Java Resources/src/META-INF folder:
1.	Select persistence.xml, and from the context menu choose   Open With   Persistence XML Editor.
2.	On the General tab, enter org.eclipse.persistence.jpa.PersistenceProvider in the Persistence provider field.
3.	On the Connection tab, enter the transaction type Resource Local.
4.	On the Options tab, enter the DDL generation type Create Tables in the EclipseLink Schema Generation section.
5.	Save the file.
Prepare the Web Application Project for JPA
 

To prepare the web app for JPA, we have to include the EclipseLink jar files and the XSS Protection Library into the project class path. We also need to edit the web.xml file.
1.	Add EclipseLink executables to the Web application project:
a.	In the Project Explorer view, select the persistence-with-jpa/WebContent/WEB-INF/lib node.
b.	From the context menu, choose   Import   General    File System    and then choose Next.
c.	Browse to and select the local directory to which you copied the downloaded EclipseLink JAR files (see the Prerequisites section), and choose OK.
d.	Choose the Select All button to select the checkboxes for the two EclipseLink JAR files, eclipselink.jar and javax.persistence_2.*.jar, and then chooseFinish.
2.	Add the XSS Protection Library to the Web application project:
a.	In the Project Explorer view, select the persistence-with-jpa/WebContent/WEB-INF/lib node.
b.	From the context menu, choose   Import   General    File System   and then choose Next.
c.	Browse to the local directory where you downloaded and unpacked the SAP HANA Cloud Platform SDK, select the repository/plugins directory, and choose OK .
d.	Select the checkbox com.sap.security.core.server.csi_1.x.y.jar and choose Finish.
3.	Adapt the Java build path order:
a.	In the Project Explorer view, select the persistence-with-jpa node, and from the context menu choose Properties.
b.	Select Java Build Path and switch to the Order and Export tab.
c.	Select Web App Libraries and move it up so that it is positioned above SAP HANA Cloud.
d.	Choose OK to finish this step.
4.	Add the resource reference description to web.xml:
a.	In the Project Explorer view, expand the persistence-with-jpa/WebContent/WEB-INF node.
b.	Select web.xml, and from the context menu choose   Open With   Text Editor   .
c.	Insert the following content after the <servlet-mapping> elements:
d.	<resource-ref>
e.	    <res-ref-name>jdbc/DefaultDB</res-ref-name>
f.	    <res-type>javax.sql.DataSource</res-type>
g.	</resource-ref>
h.	Save the file.




 
Next, we’ll edit the Persistence Servlet so that it makes use of the Person entity.
First, I paste this servlet code over the generated servlet.
Let’s look at some of the features of the code in this servlet.

The init method is called at startup and firstly looks for the DefaultDB JNDI resource we set up.
Once located, it creates a HashMap and places the datasource into the map against a non JTA key.
The Persistence class then uses the map to create an Enitity Manager Factory class variable called emf.

The doGet method will be automatically called with an HTTP get that occurs when we call the servlet with a URL. In this servlet, the method is used to generate an HTML list of existing people and setup an HTML form that will allow a user to add new people.

The list of existing people is generated by the ‘appendPersonTable’ method.
We can see that the emf factory is used the run the ‘AllPersons’ query we created earlier on and place the results into a list containing Person entity class types.
A 2 column HTML Table is setup and sent to the output writer stream and an XSSEncode object is obtained. This is a SAP class which will be used here to set HTTP encoding for the persisted values.
Then each existing person’s first and last name is retrieved by looping through the list obtained by the query and placed into a table cell.
The Entity Manager is then closed to conserve system resources.

The appendAddForm method simply outputs the HTML form with the name values and a submit button. There is no variable data in this string and as such it will never change.




The doPost method will respond to a call from this add record form when the ‘Add Person’ button is clicked. The method will then attempt to persist the person values with the doAdd method and then  re-create the person list and add form by calling doGet.

DoAdd attempts to retrieve the first and last name parameters from the HTTP stream and creates another instance of the Entity Manager.
If either of the names have no value, the process is aborted. Otherwise, a new person entity class is created and then populated with the name values. The entity manager will then persist those values in a transaction.
Test Deployment
 

We can test the JPA web application locally on the Java Web Server which we will now create.
1.	Right click on the persistence-with-jpa node and select Run As -> Run On Server 
2.	Select the ‘Manually Define a Server’ Radio and select Java Web Server.
3.	Ensure the app has been configured and select Finish.
4.	The app will now be launched.
Once the servlet has loaded it will be presented an Eclipse tab browser window.
We can try adding a first and last name and saving to see if the values are returned.
If we repeat the process but create a new Hana Cloud server, we can test the app on the Hana Cloud.
This may take some time to initialize but we can see that it works in exactly the same way as the local deployment

 

In this tutorial, we have created a JPA Servlet which allows a user to enter data values, a person’s first and last name and have those values persist.
To see other videos, please check out the Hana Academy Page on You Tube.
Thank you for your attention.


